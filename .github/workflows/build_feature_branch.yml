---
# yamllint disable rule:line-length
# yamllint disable rule:truthy

name: Build feature branch

on:
  push:
    branches:
      - '*'
      - '!master'

jobs:

  validate_new_version:
    name: Validate new version
    runs-on: ubuntu-latest
    outputs:
      planned_version: ${{ steps.planned_version.outputs.planned_version }}
      tag_hash: ${{ steps.lookup_tag.outputs.tag_hash }}
      can_create: ${{ steps.can_create.outputs.can_create }}
      tag_exists: ${{ steps.can_create.outputs.tag_exists }}
      branch_name: ${{ steps.get_branch_name.outputs.branch_name }}
      job_status: ${{ job.status }}

    steps:

      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0


      - name: Get trigger branch name
        id: get_branch_name
        shell: bash
        run: |
          echo "::set-output name=branch_name::${GITHUB_REF#refs/heads/}"


      - name: Check if .version file exists
        id: version_file_exists
        run: |
          if [[ -f .version ]]; then
            echo "::set-output name=version_file_exists::true"
          else
            echo "::set-output name=version_file_exists::false"
          fi


      - name: Read out .version file
        if: steps.version_file_exists.outputs.version_file_exists == 'true'
        id: planned_version
        run: echo "::set-output name=planned_version::$(cat .version)"


      - name: Display planned version
        id: display_planned_version
        run: |
          echo "::debug::Planned version: ${{ steps.planned_version.outputs.planned_version }}"


      - name: Lookup planned tag
        id: lookup_tag
        run: |
          URL="https://api.github.com/repos/${{ github.repository }}/git/refs/tags/${{ steps.planned_version.outputs.planned_version }}"
          OUTFILE=".tag_hash"
          curl -s -X GET -H 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' --url "${URL}" | jq .object.sha | tee "${OUTFILE}"
          echo "::set-output name=tag_hash::$(cat "${OUTFILE}")"


      - name: Define if can create a new version
        id: can_create
        if: steps.lookup_tag.outputs.tag_hash == 'null'
        run: |
          echo "::set-output name=tag_exists::false"
          echo "::set-output name=can_create::true"


  build_and_test:
    name: Build, Test
    runs-on: ubuntu-latest
    outputs:
      job_status: ${{ job.status }}
      filename: ${{ steps.artifact_meta.outputs.filename }}

    needs:
      - validate_new_version

    env:
      PLANNED_VERSION: ${{ needs.validate_new_version.outputs.planned_version }}
      TAG_HASH: ${{ needs.validate_new_version.outputs.tag_hash }}
      CAN_CREATE_RELEASE: ${{ needs.validate_new_version.outputs.can_create }}
      TAG_EXISTS: ${{ needs.validate_new_version.outputs.tag_exists }}
      BRANCH_NAME: ${{ needs.validate_new_version.outputs.branch_name }}
      APP_NAME: "nginx-redis-njs"

    if: >
      github.event_name == 'push'

    steps:


      - name: Validate envionment variables
        id: validate_envvars
        shell: bash
        run: |
          [[ ! -z "PLANNED_VERSION" ]] || exit 2
          [[ ! -z "TAG_HASH" ]] || exit 2
          [[ ! -z "CAN_CREATE_RELEASE" ]] || exit 2
          [[ ! -z "TAG_EXISTS" ]] || exit 2
          [[ ! -z "BRANCH_NAME" ]] || exit 2


      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0


      - name: Login to Docker registry
        id: docker_registry_login
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin


      - name: Define version suffix
        id: version_suffix
        run: |
          if [[ "${BRANCH_NAME}" == "master" ]]; then
            short_suffix=""
            long_suffix=""
          else
            short_suffix="${BRANCH_NAME:0:1}"
            long_suffix="${BRANCH_NAME}"
          fi


          echo "::set-output name=short::${short_suffix}"
          echo "::set-output name=long::${long_suffix}"


      - name: Define Docker image ID and full name
        id: set_docker_image_id
        run: |
          GITHUB_IMAGE_ID="$(echo "${{ github.repository }}/${APP_NAME}${IMAGE_ID}" | tr '[A-Z]' '[a-z]')"
          GITHUB_IMAGE_FULL_NAME="${GITHUB_IMAGE_ID}:${PLANNED_VERSION}${{ steps.version_suffix.outputs.long }}"

          echo "GITHUB_IMAGE_ID: '${GITHUB_IMAGE_ID}'"
          echo "GITHUB_IMAGE_FULL_NAME: '${GITHUB_IMAGE_FULL_NAME}'"

          echo "::set-output name=github_image_id::${GITHUB_IMAGE_ID}"
          echo "::set-output name=github_image_full_name::${GITHUB_IMAGE_FULL_NAME}"


      - name: Notify that docker image is about to be built
        uses: rest-gateway/notification-action@master
        with:
          message: >-
            Now building the docker image:
            ${{ steps.set_docker_image_id.outputs.github_image_full_name }}
          recipient: "${{ secrets.NOTIFICATIONS_DEFAULT_RECIPIENT }}"
          rest_gateway_url: "${{ secrets.REST_GATEWAY_API_URL }}"
          rest_gateway_token: "${{ secrets.REST_GATEWAY_TOKEN }}"
          rest_gateway_bot_name: "${{ secrets.REST_GATEWAY_BOT_NAME }}"


      - name: Build Docker image
        id: build_docker_image
        shell: bash
        run: >
          docker build
          --tag "ghcr.io/${{ steps.set_docker_image_id.outputs.github_image_full_name }}"
          --build-arg BUILD_VERSION="${PLANNED_VERSION}"
          --file Dockerfile
          .

      - name: Push Docker image to registry
        run: |
          docker push "ghcr.io/${{ steps.set_docker_image_id.outputs.github_image_full_name }}"


      - name: Notify that docker image has been built and pushed
        uses: rest-gateway/notification-action@master
        with:
          message: >-
            Docker image successfully built and pushed:

            ghcr.io/${{ steps.set_docker_image_id.outputs.github_image_full_name }}
          recipient: "${{ secrets.NOTIFICATIONS_DEFAULT_RECIPIENT }}"
          rest_gateway_url: "${{ secrets.REST_GATEWAY_API_URL }}"
          rest_gateway_token: "${{ secrets.REST_GATEWAY_TOKEN }}"
          rest_gateway_bot_name: "${{ secrets.REST_GATEWAY_BOT_NAME }}"

...
