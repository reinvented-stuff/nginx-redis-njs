---
# yamllint disable rule:line-length
# yamllint disable rule:truthy

name: Release

on:
  push:
    branches:
      - master

jobs:
  validate_new_version:
    name: Validate new version
    runs-on: ubuntu-latest
    outputs:
      planned_version: ${{ steps.planned_version.outputs.planned_version }}
      tag_hash: ${{ steps.lookup_tag.outputs.tag_hash }}
      can_create: ${{ steps.can_create.outputs.can_create }}
      tag_exists: ${{ steps.can_create.outputs.tag_exists }}
      branch_name: ${{ steps.get_branch_name.outputs.branch_name }}
      job_status: ${{ job.status }}

    steps:

      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0


      - name: Get trigger branch name
        id: get_branch_name
        shell: bash
        run: |
          echo "::set-output name=branch_name::${GITHUB_REF#refs/heads/}"


      - name: Check if .version file exists
        id: version_file_exists
        run: |
          if [[ -f .version ]]; then
            echo "::set-output name=version_file_exists::true"
          else
            echo "::set-output name=version_file_exists::false"
          fi


      - name: Read out .version file
        if: steps.version_file_exists.outputs.version_file_exists == 'true'
        id: planned_version
        run: echo "::set-output name=planned_version::$(cat .version)"


      - name: Display planned version
        id: display_planned_version
        run: |
          echo "::debug::Planned version: ${{steps.planned_version.outputs.planned_version}}"


      - name: Lookup planned tag
        id: lookup_tag
        run: |
          URL="https://api.github.com/repos/${{github.repository}}/git/refs/tags/${{steps.planned_version.outputs.planned_version}}"
          OUTFILE=".tag_hash"
          curl -s -X GET -H 'authorization: Bearer ${{secrets.GITHUB_TOKEN}}' --url "${URL}" | jq .object.sha | tee "${OUTFILE}"
          echo "::set-output name=tag_hash::$(cat "${OUTFILE}")"


      - name: Define if can create a new version
        id: can_create
        if: steps.lookup_tag.outputs.tag_hash == 'null'
        run: |
          echo "::set-output name=tag_exists::false"
          echo "::set-output name=can_create::true"


      - name: Fail on pull request if version already exists
        id: fail_on_master
        if: >
          github.event_name == 'pull_request' &&
          steps.can_create.outputs.can_create != 'true'
        run: exit 2


  release:
    name: Build, Test, Packages
    runs-on: ubuntu-latest

    env:
      PLANNED_VERSION: ${{ needs.validate_new_version.outputs.planned_version }}
      TAG_HASH: ${{ needs.validate_new_version.outputs.tag_hash }}
      CAN_CREATE_RELEASE: ${{ needs.validate_new_version.outputs.can_create }}
      TAG_EXISTS: ${{ needs.validate_new_version.outputs.tag_exists }}
      BRANCH_NAME: ${{ needs.validate_new_version.outputs.branch_name }}
      APP_NAME: "nginx-redis-njs"

    outputs:
      job_status: ${{ job.status }}

    needs:
      - validate_new_version

    if: >
      github.event_name == 'push'

    steps:

      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0


      - name: Validate envionment variables
        id: validate_envvars
        shell: bash
        run: |
          [[ ! -z "PLANNED_VERSION" ]] || exit 2
          [[ ! -z "TAG_HASH" ]] || exit 2
          [[ ! -z "CAN_CREATE_RELEASE" ]] || exit 2
          [[ ! -z "TAG_EXISTS" ]] || exit 2
          [[ ! -z "BRANCH_NAME" ]] || exit 2


      - name: Login to Docker registry
        id: docker_registry_login
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin


      - name: Define version suffix
        id: version_suffix
        run: |
          if [[ "${BRANCH_NAME}" == "master" ]]; then
            short_suffix=""
            long_suffix=""
          else
            short_suffix="${BRANCH_NAME:0:1}"
            long_suffix="${BRANCH_NAME}"
          fi

          echo "::set-output name=short::${short_suffix}"
          echo "::set-output name=long::${long_suffix}"


      - name: Build Docker image
        id: build_docker_image
        shell: bash
        run: >
          GITHUB_IMAGE_ID=$(echo "${{ github.repository }}/${APP_NAME}${IMAGE_ID}" | tr '[A-Z]' '[a-z]')

          docker build
          --tag "ghcr.io/${GITHUB_IMAGE_ID}:${PLANNED_VERSION}${{ steps.version_suffix.outputs.long }}"
          --build-arg BUILD_VERSION="${PLANNED_VERSION}"
          --file Dockerfile
          .


      - name: Push Docker image to registry
        run: |
          GITHUB_IMAGE_ID=$(echo "${{ github.repository }}/${APP_NAME}${IMAGE_ID}" | tr '[A-Z]' '[a-z]')
          docker push "ghcr.io/${GITHUB_IMAGE_ID}:${PLANNED_VERSION}${{ steps.version_suffix.outputs.long }}"


      - name: Generate changelog
        id: generate_changelog
        shell: bash
        run: |
          described=$(git describe --tags || git rev-list --max-parents=0 HEAD)
          described_parts=( ${described//-/ } )
          current_tag=${described_parts[0]}

          pull_command_example="podman pull ghcr.io/${GITHUB_IMAGE_ID}:${PLANNED_VERSION}${{ steps.version_suffix.outputs.long }}"

          changelog_filename=".changelog"
          release_changelog_filename=".release_changelog"
          echo "current_tag=${current_tag}"

          echo "Listing current changes..."
          git log --pretty=oneline --format='%w(1000)* %cd %an <%ae>%n%w(60,0,2)- %s%n' --date="format:%a %b %d %Y" "$current_tag"..HEAD | tee "${changelog_filename}"
          git log --pretty=oneline --format='%w(200,0,2)- %s (%an <%ae>)' --date="format:%a %b %d %Y" "$current_tag"..HEAD | sort | tee "${release_changelog_filename}"

          echo "Changelog file..."
          cat .changelog

          echo "Preparing a GitHub Release Changelog"
          cat << EOF > "${release_changelog_filename}"
          Docker image
          ============

          \`podman ${pull_command_example}\`

          \`docker ${pull_command_example}\`

          Changelog
          =========

          $(cat "${release_changelog_filename}")
          EOF

          echo "::set-output name=changelog_filename::${changelog_filename}"
          echo "::set-output name=release_changelog_filename::${release_changelog_filename}"


      - name: Display changelog
        run: echo "${{ steps.generate_changelog.outputs.changelog }}"


      - name: Create a new tag
        if: >
          needs.validate_new_version.outputs.can_create == 'true' &&
          needs.validate_new_version.outputs.branch_name == 'master' &&
          github.event_name == 'push'
        run: |
          curl --request POST --url https://api.github.com/repos/${{ github.repository }}/git/tags \
          -H 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          -H 'content-type: application/json' \
          --data '{"tag": "${env.PLANNED_VERSION}",
            "message": "Pipeline build tag",
            "object": "${{ github.sha }}",
            "type": "commit",
            "tagger": {
              "name": "Alice from Wonderland",
              "email": "noreply@localhost.localdomain",
              "date": "${{steps.timestamp.outputs.timestamp}}"
            }'


      - name: Create a Release
        id: create_release
        if: >
          needs.validate_new_version.outputs.can_create == 'true' &&
          needs.validate_new_version.outputs.branch_name == 'master' &&
          github.event_name == 'push'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{env.PLANNED_VERSION}}
          release_name: v${{env.PLANNED_VERSION}}
          body_path: ${{steps.generate_changelog.outputs.release_changelog_filename}}
          draft: false
          prerelease: false

...
